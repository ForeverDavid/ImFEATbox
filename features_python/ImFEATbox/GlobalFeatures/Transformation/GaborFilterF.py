import numpy as np

def GaborFilterF(I,typeflag,gradtype,scale,orientation,plotflag):
"""
     Input:     - I: A 2D image
                - typeflag: Struct of logicals to permit extracting features
                  based on desired characteristics:
                       + typeflag.global: all features
                       + typeflag.transform: all features
                       + typeflag.gradient: only features based on gradient
                       + typeflag.texture: only features based on texture
                       + typeflag.entropy: only features based on entropy
                  default: all features are being extracted
                  For more information see README.txt
                - gradtype: Struct of logicals to choose which type of
                  gradient should be applied:
                       + gradtype.first: first order gradient
                       + gradtype.second: second order gradient (Laplacian)
                  default: both types of gradients are used
                - scale: Number of scales
                - orientation: Number of orientations
                - plotflag: A logical flag to enable/disable visualization


     Output:    - Out: A 1x3600 feature vector for 90 measures and 40 filters.
"""
    # ************************************************************************
    # Implemented for MRI feature extraction by the Department of Diagnostic
    # and Interventional Radiology, University Hospital of Tuebingen, Germany
    # and the Institute of Signal Processing and System Theory University of
    # Stuttgart, Germany. Last modified: February 2017
    #
    # This implementation is part of ImFEATbox, a toolbox for image feature
    # extraction and analysis. Available online at:
    # https://github.com/annikaliebgott/ImFEATbox
    #
    # Contact: annika.liebgott@iss.uni-stuttgart.de
    # ************************************************************************

    ## Generate Gabor filters
    # GaborResult: A cell containing images filtered with Gabor filters
    # generated by Generate_GaborFilter.m
    # Each cell entry represents one filtered image.
    GaborResult = Generate_GaborFilter(scale,orientation,I,plotflag)


    ## extract features

    counter = 1
    Out = np.zeros(3600)

    for i in range(0, np.size(GaborResult, 0)):
    #for i=1:1:size(GaborResult,1)
        for j in range(0, np.size(GaborResult, 1)):
        #for j=1:1:size(GaborResult,2)
            FilteredImage = GaborResult[i,j]

            # extract some features directly from filtered image
            if (typeflag['transform'] or typeflag['global']):
                std_fI = np.std(np.abs(FilteredImage(:)))
                mean_fI = np.mean(np.abs(FilteredImage(:)))
                energy_fI = np.sum(np.sum(np.power(FilteredImage, 2)))

            # extract gradient features of filtered image
            if (typeflag['transform'] or typeflag['global'] or typeflag['gradient']):
                GaborGradFeatures = GradientF(FilteredImage,typeflag,gradtype)

            # extract histogram-based features of filtered image
            if (typeflag['transform'] or typeflag['global'] or typeflag['texture']):
                GaborHistFeatures = HistogramF(FilteredImage,typeflag)

            if (not typeflag.transform) and (not typeflag['global']):
                if not typeflag['texture']:
                    Out[counter:counter+length(GaborGradFeatures)-1] = GaborGradFeatures
                    counter = counter + length(GaborGradFeatures)
                elif not typeflag['gradient']:
                    Out[counter:counter+length(GaborHistFeatures)-1] = GaborHistFeatures
                    counter = counter + length(GaborHistFeatures)
                else:
                    Out[counter:counter+length(GaborGradFeatures)+length(GaborHistFeatures)-1] =
                        [GaborGradFeatures, GaborHistFeatures]
            else:
                Out[counter:(counter+3+length(GaborGradFeatures) + length(GaborHistFeatures)-1)] =
                    [std_fI, mean_fI, energy_fI, GaborGradFeatures, GaborHistFeatures] # 3+11=14
                counter = counter + 3 + length(GaborGradFeatures) + length(GaborHistFeatures)

    ## return feature vector

    Out = np.real(Out)
    return Out
